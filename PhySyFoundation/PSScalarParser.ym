%{
    #import "PhySyFoundation.h"
    #import "PSCFString.h"
    #import "PSScalarParser.h"
    void psserror(char *s, ...);
    PSScalarRef result;
    CFErrorRef scalarError;
    int psslex(void);    
%}

%name-prefix="pss"

%union {
    ScalarNodeRef a;
    PSScalarRef d;
    struct symbol *s;
    builtInMathFunctions math_fn;
    builtInConstantFunctions const_fn;
    CFMutableStringRef const_string;
}

/* declare tokens */
%token <d> SCALAR
%token <math_fn> MATH_FUNC
%token <const_fn> CONST_FUNC
%token <const_string> CONST_STRING
%token EOL
%left '='
%left  '+' '-'
%left '*' '/'
%right '^'
%right '!'
%nonassoc '|' UMINUS

%type <a> exp explist

/* may 19th, 2013 removed line below from exp: (was after exp '*' exp) */

%%
calclist:   /* do nothing */
| calclist exp { 
    result = ScalarNodeEvaluate($2, &scalarError);
    if(!ScalarNodeisLeaf($2)) ScalarNodeFree($2);
}
;

exp: exp '+' exp {$$ = ScalarNodeCreateInnerNode('+',$1, $3);}
| exp '-' exp {$$ = ScalarNodeCreateInnerNode('-',$1, $3);}
| exp '*' exp {$$ = ScalarNodeCreateInnerNode('*',$1, $3);}
| exp '/' exp {$$ = ScalarNodeCreateInnerNode('/',$1, $3);}
| exp '^' exp {$$ = ScalarNodeCreateInnerNode('^',$1, $3);}
| '|' exp '|' {$$ = ScalarNodeCreateInnerNode('|',$2, NULL);}
| '(' exp ')' {$$ = $2;}
| '-' exp %prec UMINUS{$$ = ScalarNodeCreateInnerNode('M',$2, NULL);}
| exp '!' {$$ = ScalarNodeCreateInnerNode('!',$1, NULL);}
| SCALAR    {if($1==NULL) {YYERROR;} $$ = ScalarNodeCreateNumberLeaf($1);}
| MATH_FUNC '(' explist ')' {$$ = ScalarNodeCreateMathFunction($1,$3);}
| CONST_FUNC CONST_STRING {$$ = ScalarNodeCreateConstantFunction($1,$2);}
;

explist: exp
| exp ',' explist   {$$ = ScalarNodeCreateInnerNode('L',$1,$3);}

%%

extern int pss_scan_string(const char *);
extern void psslex_destroy(void);
bool pss_syntax_error;

PSScalarRef PSScalarCreateWithCFString(CFStringRef string, CFErrorRef *error)
{
    if(error) if(*error) return NULL;
    if(CFStringCompare(string,kPSQuantityDimensionless,kCFCompareCaseInsensitive) == kCFCompareEqualTo) return NULL;

    CFMutableStringRef  mutString = CFStringCreateMutableCopy ( kCFAllocatorDefault,0,string);

    CFStringFindAndReplace (mutString,CFSTR("*"), CFSTR("•"),CFRangeMake(0,CFStringGetLength(mutString)),0);

    result = NULL;
    scalarError = NULL;
    // check for and get the final conversion unit
    double unit_multiplier = 1.0;
    PSUnitRef finalUnit = ConversionWithDefinedUnit(mutString, &unit_multiplier, error);

    CFStringFindAndReplace (mutString,CFSTR("•"), CFSTR("*"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("×"), CFSTR("*"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("÷"), CFSTR("/"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("−"), CFSTR("-"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("\n"), CFSTR(""),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("+"), CFSTR("+"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("μ"), CFSTR("µ"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("γ"), CFSTR("𝛾"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("º"), CFSTR("°"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("h_p"), CFSTR("h_P"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("ɣ"), CFSTR("𝛾"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("√"), CFSTR("sqrt"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("∛"), CFSTR("cbrt"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("∜"), CFSTR("qtrt"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR(" "), CFSTR(""),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR(")("), CFSTR(")*("),CFRangeMake(0,CFStringGetLength(mutString)),0);
    CFStringFindAndReplace (mutString,CFSTR("Ɑ"), CFSTR("α"),CFRangeMake(0,CFStringGetLength(mutString)),0);

    // Quick fix for quartertsp
    CFStringFindAndReplace (mutString,CFSTR("qtertsp"), CFSTR("quartertsp"),CFRangeMake(0,CFStringGetLength(mutString)),kCFCompareCaseInsensitive);

    CFArrayRef openParentheses = CFStringCreateArrayWithFindResults(kCFAllocatorDefault,mutString,CFSTR("("),CFRangeMake(0,CFStringGetLength(mutString)),0);
    if(openParentheses) {
        CFMutableStringRef  mutStringNew = CFStringCreateMutableCopy ( kCFAllocatorDefault,0,mutString);
        for(CFIndex index = CFArrayGetCount(openParentheses)-1; index>=0;index--) {
            NSRange *range = (NSRange *) CFArrayGetValueAtIndex(openParentheses,index);
            if(range->location>0 && range->location<CFStringGetLength(mutString)) {
                UniChar previousCharacter = PSCFStringGetCharacterAtIndex(mutString,range->location-1);
                // Don't insert asterisk if it's a string inside [ ]
                bool closeSquareBracket = false;
                bool skipThis = false;
                for(CFIndex j=range->location-1; j>=0;j--) {
                    UniChar scanChar = PSCFStringGetCharacterAtIndex(mutString,j);
                    if(scanChar=='[') {
                        if(!closeSquareBracket) skipThis = true;
                    }
                    if(scanChar==']') closeSquareBracket = true;
                }

                if(!skipThis && characterIsDigitOrDecimalPoint(previousCharacter)) CFStringInsert(mutStringNew, range->location, CFSTR("*"));
            }
        }
        CFRelease(mutString);
        mutString = mutStringNew;
        CFRelease(openParentheses);
    }

    CFArrayRef closeParentheses = CFStringCreateArrayWithFindResults(kCFAllocatorDefault,mutString,CFSTR(")"),CFRangeMake(0,CFStringGetLength(mutString)),0);
    if(closeParentheses) {
        CFMutableStringRef  mutStringNew = CFStringCreateMutableCopy ( kCFAllocatorDefault,0,mutString);
        for(CFIndex index = CFArrayGetCount(closeParentheses)-1; index>=0;index--) {
            NSRange *range = (NSRange *) CFArrayGetValueAtIndex(closeParentheses,index);
            if(range->location<CFStringGetLength(mutString)-1) {
                UniChar nextCharacter = PSCFStringGetCharacterAtIndex(mutString,range->location+1);
                // Don't insert asterisk if it's a string inside [ ]
                bool openSquareBracket = false;
                bool skipThis = false;
                for(CFIndex j=range->location+1; j<CFStringGetLength(mutString);j++) {
                    UniChar scanChar = PSCFStringGetCharacterAtIndex(mutString,j);
                    if(scanChar==']') {
                        if(!openSquareBracket) skipThis = true;
                    }
                    if(scanChar=='[') openSquareBracket = true;
                }
                if(!skipThis) {
                    if(nextCharacter !='+' && nextCharacter !='-'
                    && nextCharacter !='*' && nextCharacter !='/'
                    && nextCharacter !='^'  && nextCharacter !=')'
                    && nextCharacter !=8226) CFStringInsert(mutStringNew, range->location+1, CFSTR("*"));
                }
                
            }
        }
        CFRelease(mutString);
        mutString = mutStringNew;
        CFRelease(closeParentheses);
    }

// Ready to Parse

    pss_syntax_error = false;
    char *cString = CreateCString(mutString);
    if(cString) {
        pss_scan_string(cString);
        pssparse();
        psslex_destroy();
        free(cString);
        CFRelease(mutString);
    }
    if(error) {
        if(scalarError) *error = scalarError;
        if(*error) {
            if(result) CFRelease(result);
            return NULL;
        }
    }
    
    if(result) {
        if(finalUnit) {
            if(!PSScalarConvertToUnit( (PSMutableScalarRef) result, finalUnit, error)) {
                CFRelease(result);
                return NULL;
            }
        }

        if(PSScalarIsReal(result)) {
            PSScalarRef realResult = PSScalarCreateByTakingComplexPart(result,kPSRealPart);
            CFRelease(result);
            return realResult;
        }
    }
    else {
        if(error) {
            CFStringRef desc = CFSTR("Syntax Error");
            *error = CFErrorCreateWithUserInfoKeysAndValues(kCFAllocatorDefault,
            kPSFoundationErrorDomain,
            0,
            (const void* const*)&kCFErrorLocalizedDescriptionKey,
            (const void* const*)&desc,
            1);
        }
    }
    
    return result;
}

void psserror(char *s, ...)
{
    CFStringRef desc = CFSTR("Syntax Error");
    scalarError = CFErrorCreateWithUserInfoKeysAndValues(kCFAllocatorDefault,kPSFoundationErrorDomain,0,
                (const void* const*)&kCFErrorLocalizedDescriptionKey,(const void* const*)&desc,1);

    pss_syntax_error = true;
}
