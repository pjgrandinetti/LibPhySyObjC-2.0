%option noyywrap nodefault
%option prefix = "psfw"
%{
    #include <stdio.h>
    #import "PhySyFoundation.h"
    
    enum yytokentype {
        NUMBER = 258,
        ELEMENT = 259,
        OPENPARENTHESIS = 260,
        CLOSEPARENTHESIS = 261,
        PLUS = 262,
        EOL = 263,
        ERROR = 264
    };
    int yylval;
%}

ELEMENT (H|He|Li|Be|B|C|N|O|F|Ne|Na|Mg|Al|Si|P|S|Cl|Ar|K|Ca|Sc|Ti|V|Cr|Mn|Fe|Co|Ni|Cu|Zn|Ga|Ge|As|Se|Br|Kr|Rb|Sr|Y|Zr|Nb|Mo|Tc|Ru|Rh|Pd|Ag|Cd|In|Sn|Sb|Te|I|Xe|Cs|Ba|La|Ce|Pr|Nd|Pm|Sm|Eu|Gd|Tb|Dy|Ho|Er|Tm|Yb|Lu|Hf|Ta|W|Re|Os|Ir|Pt|Au|Hg|Tl|Pb|Bi|Po|At|Rn|Fr|Ra|Ac|Th|Pa|U|Np|Pu|Am|Cm|Bk|Cf|Es|Fm|Md|No|Lr|Rf|Db|Sg|Bh|Hs|Mt|Ds|Rg|Cn|Uut|Fl|Uup|Lv|Uus|Uuo)
%%

{ELEMENT} { return ELEMENT; }
"(" {return OPENPARENTHESIS;}
")" {return CLOSEPARENTHESIS;}
\*[0-9]+ {return PLUS; }
[0-9]+ { yylval=atoi(yytext); return NUMBER; }
\n {return EOL;}

. {return ERROR;}
%%

PSScalarRef PSPeriodicTableCreateFormulaMass(CFStringRef formula, CFErrorRef *error)
{
    if(error) if(*error) return NULL;
    int tok;
    CFMutableStringRef calculation = CFStringCreateMutable(kCFAllocatorDefault, 0);
    CFMutableStringRef  mutString = CFStringCreateMutableCopy ( kCFAllocatorDefault,0,formula);

    char *cString = CreateCString(mutString);
    psfw_scan_string(cString);

    PSScalarRef result = NULL;

    while((tok = psfwlex())) {
        if(tok==NUMBER) {
            CFStringRef calc = CFStringCreateWithFormat(kCFAllocatorDefault, NULL, CFSTR("(%d)"),yylval);
            CFStringAppend(calculation,calc);
            CFRelease(calc);
        }
        else if(tok==ELEMENT) {
            CFStringRef calc = CFStringCreateWithFormat(kCFAllocatorDefault, NULL, CFSTR("+(aw[%s])"),yytext);
            CFStringAppend(calculation,calc);
            CFRelease(calc);
        }
        else if(tok==PLUS){
            CFStringRef calc = CFStringCreateWithFormat(kCFAllocatorDefault, NULL, CFSTR("+%s!"),yytext);
            CFStringAppend(calculation,calc);
            CFRelease(calc);
        }
        else if(tok==OPENPARENTHESIS) {
            CFStringAppend(calculation,CFSTR("+("));
        }
        else if(tok==CLOSEPARENTHESIS) {
            CFStringAppend(calculation,CFSTR(")"));
        }
        else if(tok==ERROR) {
            CFRelease(calculation);
            CFRelease(mutString);
            free(cString);
            
            psfwlex_destroy();
            return result;
        }
    }

    CFIndex length = CFStringGetLength(calculation);
    if(length>0) {
        CFStringDelete(calculation, CFRangeMake(0, 1));
        CFStringFindAndReplace (calculation,CFSTR("(+"), CFSTR("("),CFRangeMake(0,CFStringGetLength(calculation)),0);
        CFStringFindAndReplace (calculation,CFSTR("+*"), CFSTR("+"),CFRangeMake(0,CFStringGetLength(calculation)),0);
        CFIndex number = CFStringFindAndReplace (calculation,CFSTR("!+"), CFSTR("("),CFRangeMake(0,CFStringGetLength(calculation)),0);
        if(number==1) {
            CFStringAppend(calculation,CFSTR(")"));
        }
        
        result = PSScalarCreateWithCFString(calculation, error);
    }

    CFRelease(calculation);
    CFRelease(mutString);
    free(cString);

    psfwlex_destroy();
    return result;
}


